1.JSON格式   
JSON格式就是一种表示一系列的“值”的方法，这些值包含在数组或对象之中，是它们的成员。
对于这一系列的“值”，有如下几点格式规定：
数组或对象的每个成员的值，可以是简单值，也可以是复合值。
简单值分为四种：字符串、数值（必须以十进制表示）、布尔值和null（NaN, Infinity, -Infinity和undefined都会被转为null）。
复合值分为两种：符合JSON格式的对象和符合JSON格式的数组。
数组或对象最后一个成员的后面，不能加逗号。
数组或对象之中的字符串必须使用双引号，不能使用单引号。
对象的成员名称必须使用双引号。
空数组和空对象都是合格的JSON值，null本身也是一个合格的JSON值。


2. 解析JSON
所有现代浏览器都支持 JSON对象，有两个非常有用的方法来处理 JSON 格式的内容：
JSON.parse(string) ：接受一个 JSON 字符串并将其转换成一个 JavaScript 对象。
JSON.stringify(obj) ：接受一个 JavaScript 对象并将其转换为一个 JSON 字符串。

2.1 JSON.stringify()
在写JavaScript的时候，我们用JSON.stringify将某个值序列化为一个字符串值来表示一个对象。
小栗子：
JSON.stringify({
    name: "Samara",
    country: "Jimbabwe"
});
// 输出结果:  "{"name":"Samara","country":"Jimbabwe"}"

JSON.stringify("Oh look, a string!");
// 输出结果： ""Oh look, a string!""

JSON.stringify([1,2,"open","the","door"]);
// 输出结果： "[1,2,"open","the","door"]"

再举一个栗子：
JSON.stringify({
    doStuff: function() { },
    doThings: [ function() {}, undefined ]
});
// 输出结果:  "{"doThings":[null,null]}"
分析：
undefined 值、函数或者XML值会被忽略
如果你的数组当中含有 undefined值，函数或XML值，该数组中的这些值将会被当成 null
上面代码中，原始对象的doStuff属性是一个函数，JSON.stringify方法返回的字符串会将这个属性省略。而doThings属性是一个数组，成员分别为函数和undefined，它们都被转成了null。

正则对象会被转成空对象。
JSON.stringify(/foo/) // "{}"

2.1.1 JSON.stringify 方法会忽略对象的不可遍历属性
var obj = {};
Object.defineProperties(obj, {
  'foo': {
    value: 1,
    enumerable: true
  },
  'bar': {
    value: 2,
    enumerable: false
  }
});

JSON.stringify(obj); // {"foo":1}
分析：
当对象的属性设置成不可遍历，使用JSON.stringify处理该对象时会忽略掉这部分属性。
上面代码中，bar是obj对象的不可遍历属性，JSON.stringify方法会忽略这个属性。

2.1.2  JSON.stringify 方法的第二个参数
1. JSON.stringify方法还可以接受一个数组参数，指定需要转成字符串的属性。
JSON.stringify({ a:1, b:2 }, ['a'])
// '{"a":1}'
分析：
上面代码中，JSON.stringify方法的第二个参数指定，只转a属性。


2. JSON.stringify 方法还可以接受一个函数作为参数，用来更改默认的字符串化的行为。
function f(key, value) {
  if (typeof value === "number") {
    value = 2 * value;
  }
  return value;
}

JSON.stringify({ a:1, b:2 }, f)
// '{"a":2,"b":4}'
上面代码中的f函数，接受两个参数，分别是被转化对象的键和值。
如果一个键的值是数值，就将它乘以2，否则就原样返回。
如果是多级嵌套的对象它会怎么处理呢？

要点一 ：其实这个处理函数是递归处理所有的键。
接下来看一个比较有意思的栗子：
var o = {a: {b:1}};

function f(key, value) {
  console.log("["+ key +"]:" + value);
  return value;
}

JSON.stringify(o, f)
// []:[object Object] 
// [a]:[object Object]
// [b]:1
// '{"a":{"b":1}}'

分析：
上面的代码中，对象 o 一共会被 f 函数处理三次。第一次键名为空，键值是整个对象o；第二次键名为a，键值是{b:1}；第三次键名为b，键值为1。

要点二： 递归处理中，每一次处理的对象，都是前一次返回的值。
var o = {a: 1};

function f(key, value){
  if (typeof value === "object"){
    return {b: 2};
  }
  return value*2;
}

JSON.stringify(o,f)
// '{"b":4}'
上面代码中，f 函数修改了对象o,接着 JSON.stringify方法就递归处理修改后的对象o。

要点三： 如果处理函数返回undefined或没有返回值，则该属性会被忽略。
function f(key, value) {
  if (typeof(value) == "string") {
    return undefined;
  }
  return value;
}

JSON.stringify({ a:"abc", b:123 }, f)
// '{"b":123}'
分析：
上面代码中，a属性经过处理后，返回undefined，于是该属性被忽略了。

2.1.3 JSON.stringify 方法的第三个参数
JSON.stringify还可以接受第三个参数，用于增加返回的JSON字符串的可读性。
如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。
（1）当第三个参数为数字的时候
下面的案例是当第三个参数为数字的时候：
// 这是一段应用程序中的调试标记日志
var person = {
    name: "Jim Cowart",
    location: {
        city: {
            name: "Chattanooga",
            population: 167674
        },
        state: {
            name: "Tennessee",
            abbreviation: "TN",
            population: 6403000
        }
    },
    company: "appendTo"
};

JSON.stringify(person)

// 我们得到的数据
'{"name":"Jim Cowart","location":{"city":{"name":"Chattanooga","population":167674},"state":{"name":"Tennessee","abbreviation":"TN","population":6403000}},"company":"appendTo"}'

// 我们期望的格式
"{
    "name": "Jim Cowart",
    "location": {
        "city": {
            "name": "Chattanooga",
            "population": 167674
        },
        "state": {
            "name": "Tennessee",
            "abbreviation": "TN",
            "population": 6403000
        }
    },
    "company": "appendTo"
}"
 如果我们得到一段数据但是它的可读性不是很好，我们期望它变成我们想要的可读性更棒的格式，这个时候就运用到了JSON.stringify的第三个参数了。
var person = {
    name: "Jim Cowart",
    location: {
        city: {
            name: "Chattanooga",
            population: 167674
        },
        state: {
            name: "Tennessee",
            abbreviation: "TN",
            population: 6403000
        }
    },
    company: "appendTo"
};

//如果你希望缩进量为2 个空格，你可以这么干：
JSON.stringify(person, null, 2);
/* produces:
"{
  "name": "Jim Cowart",
  "location": {
    "city": {
      "name": "Chattanooga",
      "population": 167674
    },
    "state": {
      "name": "Tennessee",
      "abbreviation": "TN",
      "population": 6403000
    }
  },
  "company": "appendTo"
}"
*/
// 如果你希望使用 tab 缩进，那么
// 你可以传入 \t 作为第三个参数
// 以此来告别空格缩进
JSON.stringify(person, null, "\t");
/*输出结果:
"{
    "name": "Jim Cowart",
    "location": {
        "city": {
            "name": "Chattanooga",
            "population": 167674
        },
        "state": {
            "name": "Tennessee",
            "abbreviation": "TN",
            "population": 6403000
        }
    },
    "company": "appendTo"
}"
*/
 分析：
我们看到它的第二个参数我们传的null,上面已经说过了第二个参数可以为数组也可以为函数。
如果第二个参数是一个数组，它将只输出你在该数组中所想要包含的keys。
// 假定 person对象是上一例子中的那个，
JSON.stringify(person, ["name", "company"], 4);
/* 输出结果:
"{
    "name": "Jim Cowart",
    "company": "appendTo"
}"
*/

 如果第二个参数是函数，那么这个函数需要有两个参数：key 和 value ：
// a bit contrived, but it shows what's possible
// FYI - 被序列化的值是第一个传给replacerFn的东西, 也即是这个对象的每一个key，因此需要检查key的真假。
var replacerFn = function(key, value) {
    if(!key || key === 'name' || key === 'company') {
        return value;
    }
    return; //返回 undefined 并忽略 
}
JSON.stringify(person, replacerFn, 4);
/* produces:
"{
    "name": "Jim Cowart",
    "company": "appendTo"
}"
*/
 （2）当第三个参数为字符串的时候
那么还有一种情况是第三个参数是字符串的时候：
JSON.stringify({ p1:1, p2:2 }, null, "|-");
// "{
|-"p1": 1,
|-"p2": 2
}"

 2.1.4  JSON.stringify 方法处理的对象，包含一个 toJSON 方法
如果JSON.stringify方法处理的对象，包含一个toJSON方法，则它会使用这个方法得到一个值，然后再将这个值转成字符串，而忽略其他成员。
JSON.stringify({
  toJSON: function() {
    return "Cool"
  }
})
// "Cool""

var o = {
  foo: 'foo',
  toJSON: function() {
    return 'bar';
  }
};
var json = JSON.stringify({x: o}); 
// '{"x":"bar"}'

 Date对象就部署了一个自己的toJSON方法。
JSON.stringify(new Date("2011-07-29"))
// "2011-07-29T00:00:00.000Z"

 toJSON方法的一个应用是，可以将正则对象自动转为字符串。
RegExp.prototype.toJSON = RegExp.prototype.toString;

JSON.stringify(/foo/)
// "/foo/"

 分析：
上面代码，在正则对象的原型上面部署了toJSON方法，将其指向toString方法，因此遇到转换成JSON时，就正则对象就先调用toJSON方法转为字符串，然后再被JSON.stingify方法处理。
2.2 JSON.parse()
JSON.parse方法用于将JSON字符串转化成对象。
JSON.parse('{}') // {}
JSON.parse('true') // true
JSON.parse('"foo"') // "foo"
JSON.parse('[1, 5, "false"]') // [1, 5, "false"]
JSON.parse('null') // null

var o = JSON.parse('{"name":"张三"}');
o.name // 张三

 如果传入的字符串不是有效的JSON格式，JSON.parse方法将报错。
JSON.parse("'String'") // illegal single quotes
// SyntaxError: Unexpected token ILLEGAL

 上面代码中，双引号字符串中是一个单引号字符串，因为单引号字符串不符合JSON格式，所以报错。
为了处理解析错误，可以将JSON.parse方法放在try...catch代码块中。

2.2.1 JSON.parse()的第二个参数
JSON.parse方法可以接受一个处理函数，用法与JSON.stringify方法类似。
function f(key, value) {
  if ( key === ""){
      return value;
  }
  if ( key === "a" ) {
    return value + 10;
  }
}

var o = JSON.parse('{"a":1,"b":2}', f);
o.a // 11
o.b // undefined


引用：https://juejin.im/post/5be5b9f8518825512f58ba0e